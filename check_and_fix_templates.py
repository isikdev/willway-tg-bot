#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import re
import sys
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def check_and_fix_template(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —à–∞–±–ª–æ–Ω, –∑–∞–º–µ–Ω—è—è user.name –Ω–∞ blogger_name"""
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read()
        
        # –ò—â–µ–º –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è user.name –≤ —à–∞–±–ª–æ–Ω–µ
        patterns = [
            r'user\.name',  # –ü—Ä—è–º–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –∫–æ–¥–µ Python –∏–ª–∏ —à–∞–±–ª–æ–Ω–µ
            r'{{\s*user\.name\s*}}',  # –í Jinja –≤—ã—Ä–∞–∂–µ–Ω–∏—è—Ö
            r'{%\s*if\s+user\.name\s*%}',  # –í Jinja —É—Å–ª–æ–≤–∏—è—Ö
            r'{%\s*for.*?user\.name.*?%}'  # –í Jinja —Ü–∏–∫–ª–∞—Ö
        ]
        
        fixed = False
        fixed_content = content
        
        for pattern in patterns:
            if re.search(pattern, fixed_content):
                # –ó–∞–º–µ–Ω—è–µ–º user.name –Ω–∞ blogger_name –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                if pattern == r'user\.name':
                    fixed_content = re.sub(pattern, 'blogger_name', fixed_content)
                elif pattern == r'{{\s*user\.name\s*}}':
                    fixed_content = re.sub(pattern, '{{ blogger_name }}', fixed_content)
                elif pattern == r'{%\s*if\s+user\.name\s*%}':
                    fixed_content = re.sub(pattern, '{% if blogger_name %}', fixed_content)
                else:
                    # –î–ª—è for —Ü–∏–∫–ª–æ–≤ –¥–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–º–µ–Ω—É, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å —Ä—É—á–Ω–æ–π –ø—Ä–∞–≤–∫–∏
                    fixed_content = re.sub(r'user\.name', 'blogger_name', fixed_content)
                
                fixed = True
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ user.name –≤ {file_path} –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ {pattern}")
        
        if fixed:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            with open(file_path, 'w', encoding='utf-8') as file:
                file.write(fixed_content)
            logger.info(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω {file_path}")
            return True
        else:
            logger.info(f"‚úì –®–∞–±–ª–æ–Ω {file_path} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —à–∞–±–ª–æ–Ω–æ–≤
        templates_dir = os.path.join(os.getcwd(), 'willway_blogers', 'templates')
        
        if not os.path.exists(templates_dir):
            logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {templates_dir}")
            return False
        
        logger.info(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {templates_dir}")
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö HTML —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤
        html_files = list(Path(templates_dir).glob('*.html'))
        logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(html_files)} HTML —Ñ–∞–π–ª–æ–≤")
        
        fixed_count = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —à–∞–±–ª–æ–Ω
        for file_path in html_files:
            if check_and_fix_template(file_path):
                fixed_count += 1
        
        if fixed_count > 0:
            logger.info(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} —Ñ–∞–π–ª–æ–≤")
        else:
            logger.info(f"‚úì –í—Å–µ —à–∞–±–ª–æ–Ω—ã –≤ –ø–æ—Ä—è–¥–∫–µ, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 