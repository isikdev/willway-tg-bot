#!/usr/bin/env python
# -*- coding: utf-8 -*-

import logging
import os
import sqlite3
import sys
import argparse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def get_db_path():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    db_path = os.path.join(script_dir, 'database', 'willway.db')
    
    if not os.path.exists(db_path):
        logger.error(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {db_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        alt_db_paths = [
            os.path.join(script_dir, 'willway.db'),
            os.path.join(script_dir, 'health_bot.db'),
            os.path.join(script_dir, 'willway_bloggers.db')
        ]
        
        for alt_path in alt_db_paths:
            if os.path.exists(alt_path):
                logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞: {alt_path}")
                return alt_path
        
        logger.error(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç")
        return None
    
    return db_path

def check_column_exists(conn, table_name, column_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
    cursor = conn.cursor()
    cursor.execute(f"PRAGMA table_info({table_name})")
    columns = cursor.fetchall()
    return any(col[1] == column_name for col in columns)

def add_column_if_not_exists(conn, table_name, column_name, column_type):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    if not check_column_exists(conn, table_name, column_name):
        cursor = conn.cursor()
        try:
            cursor.execute(f"ALTER TABLE {table_name} ADD COLUMN {column_name} {column_type}")
            logger.info(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ {column_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É {table_name}")
            return True
        except sqlite3.Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏ {column_name}: {str(e)}")
            return False
    else:
        logger.info(f"‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ {column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}")
        return False

def fix_users_table(conn):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É users"""
    logger.info("===== –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users =====")
    
    # –°–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
    columns_to_add = [
        ("first_name", "TEXT"),
        ("last_name", "TEXT"),
        ("chat_id", "INTEGER"),
        ("registered_at", "TIMESTAMP"),
        ("payment_status", "TEXT"),
        ("welcome_message_sent", "BOOLEAN DEFAULT 0"),
        ("referrer_id", "INTEGER"),
        ("referral_source", "TEXT"),
        ("blogger_ref_code", "TEXT")
    ]
    
    changes_made = False
    for column_name, column_type in columns_to_add:
        if add_column_if_not_exists(conn, "users", column_name, column_type):
            changes_made = True
    
    if changes_made:
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        logger.info("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ users —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏")

def create_bloggers_table(conn):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –±–ª–æ–≥–µ—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    logger.info("===== –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã bloggers =====")
    
    cursor = conn.cursor()
    try:
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS bloggers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            telegram_username TEXT,
            email TEXT,
            access_key TEXT UNIQUE NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_active BOOLEAN DEFAULT 1,
            commission_rate REAL DEFAULT 0.1,
            total_referrals INTEGER DEFAULT 0,
            total_earnings REAL DEFAULT 0,
            paid_amount REAL DEFAULT 0,
            pending_amount REAL DEFAULT 0
        )
        """)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ bloggers —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except sqlite3.Error as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã bloggers: {str(e)}")

def create_blogger_payments_table(conn):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≤—ã–ø–ª–∞—Ç –±–ª–æ–≥–µ—Ä–∞–º, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    logger.info("===== –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã blogger_payments =====")
    
    cursor = conn.cursor()
    try:
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS blogger_payments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            blogger_id INTEGER NOT NULL,
            amount REAL NOT NULL,
            status TEXT DEFAULT 'pending',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            paid_at TIMESTAMP,
            notes TEXT,
            FOREIGN KEY (blogger_id) REFERENCES bloggers (id)
        )
        """)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ blogger_payments —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except sqlite3.Error as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã blogger_payments: {str(e)}")

def create_blogger_stats_table(conn):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–ª–æ–≥–µ—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    logger.info("===== –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã blogger_stats =====")
    
    cursor = conn.cursor()
    try:
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS blogger_stats (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            blogger_id INTEGER NOT NULL,
            date DATE NOT NULL,
            clicks INTEGER DEFAULT 0,
            registrations INTEGER DEFAULT 0,
            payments INTEGER DEFAULT 0,
            earnings REAL DEFAULT 0,
            FOREIGN KEY (blogger_id) REFERENCES bloggers (id),
            UNIQUE(blogger_id, date)
        )
        """)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ blogger_stats —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except sqlite3.Error as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã blogger_stats: {str(e)}")

def fix_database():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db_path = get_db_path()
    if not db_path:
        logger.error("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    logger.info(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—É—Ç–∏: {db_path}")
    
    try:
        conn = sqlite3.connect(db_path)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
        fix_users_table(conn)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –±–ª–æ–≥–µ—Ä–æ–≤
        create_bloggers_table(conn)
        create_blogger_payments_table(conn)
        create_blogger_stats_table(conn)
        
        conn.commit()
        conn.close()
        
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        return True
    except sqlite3.Error as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return False

def create_blogers_files():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –±–ª–æ–≥–µ—Ä–æ–≤"""
    logger.info("===== –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –±–ª–æ–≥–µ—Ä–æ–≤ =====")
    
    script_dir = os.path.dirname(os.path.abspath(__file__))
    blogers_dir = os.path.join(script_dir, 'willway_blogers')
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é willway_blogers, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(blogers_dir):
        os.makedirs(blogers_dir)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {blogers_dir}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs(os.path.join(blogers_dir, 'templates'), exist_ok=True)
        os.makedirs(os.path.join(blogers_dir, 'static'), exist_ok=True)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ templates –∏ static")
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±–ª–æ–≥–µ—Ä–æ–≤')
    parser.add_argument('--blogers', action='store_true', help='–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –±–ª–æ–≥–µ—Ä–æ–≤')
    args = parser.parse_args()
    
    success = fix_database()
    
    if args.blogers:
        create_blogers_files()
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main()) 