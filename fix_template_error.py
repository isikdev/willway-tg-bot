#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import re
import sys
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def fix_template_variable(file_path):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é user.name –Ω–∞ blogger_name –≤ —à–∞–±–ª–æ–Ω–µ"""
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read()
        
        # –ò—â–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è user.name –∏ –∑–∞–º–µ–Ω—è–µ–º –∏—Ö –Ω–∞ blogger_name
        pattern = r'user\.name'
        if re.search(pattern, content):
            fixed_content = re.sub(pattern, 'blogger_name', content)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            with open(file_path, 'w', encoding='utf-8') as file:
                file.write(fixed_content)
            
            logger.info(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è user.name –≤ —Ñ–∞–π–ª–µ {file_path}")
            return True
        else:
            logger.info(f"‚úì –§–∞–π–ª {file_path} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
        return False

def fix_dashboard_template(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ —à–∞–±–ª–æ–Ω–µ dashboard.html"""
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è blogger_name –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        # –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞: –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        pattern = r'{{\s*[\r\n\s]*blogger_name\s*[\r\n\s]*}}'
        if re.search(pattern, content):
            fixed_content = re.sub(pattern, '{{ blogger_name }}', content)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            with open(file_path, 'w', encoding='utf-8') as file:
                file.write(fixed_content)
            
            logger.info(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π blogger_name –≤ —Ñ–∞–π–ª–µ {file_path}")
            return True
        else:
            logger.info(f"‚úì –§–∞–π–ª {file_path} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
        root_dir = os.path.abspath(os.path.dirname(__file__))
        templates_dir = os.path.join(root_dir, 'willway_blogers', 'templates')
        
        if not os.path.exists(templates_dir):
            logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {templates_dir}")
            return False
        
        logger.info(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {templates_dir}")
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö HTML —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤
        html_files = list(Path(templates_dir).glob('*.html'))
        logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(html_files)} HTML —Ñ–∞–π–ª–æ–≤")
        
        fixed_count = 0
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–æ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–∞—Ö
        for file_path in html_files:
            if fix_template_variable(file_path):
                fixed_count += 1
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ dashboard.html –Ω–∞ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        dashboard_path = os.path.join(templates_dir, 'dashboard.html')
        if os.path.exists(dashboard_path):
            if fix_dashboard_template(dashboard_path):
                logger.info(f"üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ dashboard.html –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        
        if fixed_count > 0:
            logger.info(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏")
        else:
            logger.info(f"‚úì –û—à–∏–±–æ–∫ –≤ —à–∞–±–ª–æ–Ω–∞—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 