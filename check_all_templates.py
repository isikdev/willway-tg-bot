#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import re
import sys
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤—ã–≤–æ–¥–æ–º –≤ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

def check_template(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —à–∞–±–ª–æ–Ω –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ user.name"""
    try:
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞: {file_path}")
        
        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read()
        
        # –ò—â–µ–º –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è user.name –≤ —à–∞–±–ª–æ–Ω–µ
        patterns = [
            r'user\.name',  # –ü—Ä—è–º–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –∫–æ–¥–µ Python –∏–ª–∏ —à–∞–±–ª–æ–Ω–µ
            r'{{\s*user\.name\s*}}',  # –í Jinja –≤—ã—Ä–∞–∂–µ–Ω–∏—è—Ö
            r'{%\s*if\s+user\.name\s*%}',  # –í Jinja —É—Å–ª–æ–≤–∏—è—Ö
            r'{%\s*for.*?user\.name.*?%}'  # –í Jinja —Ü–∏–∫–ª–∞—Ö
        ]
        
        found = False
        
        for pattern in patterns:
            matches = re.findall(pattern, content)
            if matches:
                found = True
                logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(matches)} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ {pattern}")
                
                # –í—ã–≤–æ–¥–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
                for match in re.finditer(pattern, content):
                    start_pos = max(0, match.start() - 30)
                    end_pos = min(len(content), match.end() + 30)
                    context = content[start_pos:end_pos]
                    logger.warning(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: ...{context}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ blogger_name –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —à–∞–±–ª–æ–Ω–µ
        blogger_name_pattern = r'blogger_name'
        blogger_name_matches = re.findall(blogger_name_pattern, content)
        if blogger_name_matches:
            logger.info(f"‚úì –ù–∞–π–¥–µ–Ω–æ {len(blogger_name_matches)} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π blogger_name")
        
        if found:
            logger.error(f"‚ùå –§–∞–π–ª {file_path.name} —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è user.name")
            return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã
        else:
            logger.info(f"‚úì –§–∞–π–ª {file_path.name} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π user.name")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
        return False

def main():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ templates"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —à–∞–±–ª–æ–Ω–æ–≤
        templates_dir = os.path.join(os.getcwd(), 'willway_blogers', 'templates')
        
        if not os.path.exists(templates_dir):
            logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {templates_dir}")
            return False
        
        logger.info(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {templates_dir}")
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö HTML —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤
        html_files = list(Path(templates_dir).glob('*.html'))
        logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(html_files)} HTML —Ñ–∞–π–ª–æ–≤")
        
        problem_files = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —à–∞–±–ª–æ–Ω
        for file_path in html_files:
            if check_template(file_path):
                problem_files.append(file_path.name)
        
        if problem_files:
            logger.error(f"‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ {len(problem_files)} —Ñ–∞–π–ª–∞—Ö: {', '.join(problem_files)}")
            return False
        else:
            logger.info(f"‚úì –í—Å–µ —à–∞–±–ª–æ–Ω—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã, –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            return True
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 