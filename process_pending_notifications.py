import os
import sys
import json
import logging
import time
from datetime import datetime

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = os.path.abspath(os.path.dirname(__file__))
sys.path.insert(0, BASE_DIR)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
try:
    from database.models import get_session, User, PendingNotification
    from bot.handlers import initialize_bot
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    logger.info("–ú–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª–µ–π: {str(e)}")
    sys.exit(1)

def send_referral_bonus_notification(bot, notification, session):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞"""
    try:
        data = json.loads(notification.data)
        referral_username = data.get('referral_username', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = session.query(User).filter_by(user_id=notification.user_id).first()
        if not user:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {notification.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ
        subscription_end = user.subscription_expires.strftime("%d.%m.%Y") if user.subscription_expires else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        message = (
            f"üéÅ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!* –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å–Ω—ã–π –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏!\n\n"
            f"–í–∞—à –¥—Ä—É–≥ *{referral_username}* –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.\n\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –±—ã–ª –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ 30 –¥–Ω–µ–π.\n"
            f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: *{subscription_end}*\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –º–µ—Å—è—Ü—ã!"
        )
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(text="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ—â–µ –¥—Ä—É–∑–µ–π", callback_data="invite_friend")],
            [InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data="subscription_management")]
        ])
        
        bot.send_message(
            chat_id=notification.user_id,
            text=message,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–æ–Ω—É—Å–µ: {str(e)}")
        return False

def process_pending_notifications():
    logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    try:
        bot = initialize_bot()
        if not bot:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
            return False
        
        session = get_session()
        
        notifications = session.query(PendingNotification)\
            .filter(PendingNotification.sent == False)\
            .filter(PendingNotification.retries < 5)\
            .order_by(PendingNotification.created_at)\
            .limit(50)\
            .all()
        
        if not notifications:
            logger.info("–û—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return True
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(notifications)} –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        for notification in notifications:
            try:
                result = False
                
                if notification.message_type == "referral_bonus":
                    result = send_referral_bonus_notification(bot, notification, session)
                
                if result:
                    notification.sent = True
                    notification.sent_at = datetime.now()
                    session.commit()
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ID={notification.id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                else:
                    notification.retries += 1
                    session.commit()
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ID={notification.id}, –ø–æ–ø—ã—Ç–∫–∞ {notification.retries}/5")
                
                time.sleep(0.5)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ID={notification.id}: {str(e)}")
                notification.retries += 1
                session.commit()
            
        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        session.close()
        return True
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}")
        return False

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    if process_pending_notifications():
        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    else:
        logger.error("–í–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π") 