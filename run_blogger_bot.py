#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –±–ª–æ–≥–µ—Ä–æ–≤
"""

import os
import logging
import sys
import json
import threading
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('blogger_bot.log')
    ]
)

logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def get_bot_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞"""
    try:
        config_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'blogger_bot_config.json')
        if os.path.exists(config_path):
            with open(config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
                logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {list(config.keys())}")
                return config
        else:
            logger.error(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
            return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return {}

def apply_bot_config(bot, config):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫ –±–æ—Ç—É"""
    logger.info("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ –±–ª–æ–≥–µ—Ä–æ–≤...")
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ API Telegram
        if 'commands' in config and isinstance(config['commands'], dict):
            bot_commands = []
            for cmd, desc in config.get('commands', {}).items():
                # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª "/" –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ –∫–æ–º–∞–Ω–¥—ã
                cmd_name = cmd[1:] if cmd.startswith('/') else cmd
                bot_commands.append((cmd_name, desc))
            
            if bot_commands:
                try:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                    bot.set_my_commands(bot_commands)
                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –±–ª–æ–≥–µ—Ä–æ–≤: {bot_commands}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –±–ª–æ–≥–µ—Ä–æ–≤: {e}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è API Telegram (–±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è aiogram)
        try:
            token = config.get("bot_token") or os.getenv("BLOGGER_BOT_TOKEN")
            if token:
                import requests
                api_url = f"https://api.telegram.org/bot{token}"
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –±–æ—Ç–∞
                if "bot_name" in config:
                    response = requests.post(f"{api_url}/setMyName", data={"name": config["bot_name"]})
                    if response.status_code == 200 and response.json().get("ok"):
                        logger.info(f"–ò–º—è –±–æ—Ç–∞ –±–ª–æ–≥–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {config['bot_name']}")
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞
                if "description" in config:
                    response = requests.post(f"{api_url}/setMyDescription", data={"description": config["description"]})
                    if response.status_code == 200 and response.json().get("ok"):
                        logger.info("–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ –±–ª–æ–≥–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ "–û –±–æ—Ç–µ"
                if "about_text" in config:
                    response = requests.post(f"{api_url}/setMyShortDescription", data={"short_description": config["about_text"]})
                    if response.status_code == 200 and response.json().get("ok"):
                        logger.info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è '–û –±–æ—Ç–µ' –¥–ª—è –±–æ—Ç–∞ –±–ª–æ–≥–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            else:
                logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –±–ª–æ–≥–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ API Telegram")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ –±–ª–æ–≥–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ API Telegram: {e}")
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫ –±–æ—Ç—É –±–ª–æ–≥–µ—Ä–æ–≤: {e}")
        return False

def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start"""
    config = get_bot_config()
    webapp_url = config.get("webapp_url", "https://bloggers.api-willway.ru/blogger/login")
    admin_username = config.get("admin_username", "Jackturaa")
    
    user = update.effective_user
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", web_app=WebAppInfo(url=webapp_url))]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç WILLWAY –¥–ª—è –±–ª–æ–≥–µ—Ä–æ–≤-–ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤!\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –±–ª–æ–≥–µ—Ä–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. "
        "–¢–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ "
        "–∏ –ø–æ–ª—É—á–∞—Ç—å 20% –∫–æ–º–∏—Å—Å–∏–∏ —Å –∫–∞–∂–¥–æ–π –ø—Ä–æ–¥–∞–∂–∏.\n\n"
        f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @{admin_username}",
        reply_markup=keyboard
    )

def delete_webhook(token):
    """–£–¥–∞–ª—è–µ—Ç webhook –¥–ª—è –±–æ—Ç–∞"""
    try:
        import requests
        # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫
        webhook_url = f"https://api.telegram.org/bot{token}/deleteWebhook"
        response = requests.get(webhook_url)
        if response.status_code == 200 and response.json().get("ok"):
            logger.info("Webhook –¥–ª—è –±–æ—Ç–∞ –±–ª–æ–≥–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            return True
        else:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook –¥–ª—è –±–æ—Ç–∞ –±–ª–æ–≥–µ—Ä–æ–≤: {response.text}")
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å webhook –¥–ª—è –±–æ—Ç–∞ –±–ª–æ–≥–µ—Ä–æ–≤: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –±–ª–æ–≥–µ—Ä–æ–≤"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –±–ª–æ–≥–µ—Ä–æ–≤ WILLWAY")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    config = get_bot_config()
    token = config.get("bot_token") or os.getenv("BLOGGER_BOT_TOKEN")
    
    if not token:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –±–ª–æ–≥–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –Ω–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    # –£–¥–∞–ª—è–µ–º webhook –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    delete_webhook(token)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
    updater = Updater(token)
    dispatcher = updater.dispatcher
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –±–æ—Ç—É
    apply_bot_config(updater.bot, config)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    logger.info("–ë–æ—Ç –±–ª–æ–≥–µ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Ctrl+C
    updater.idle()

if __name__ == "__main__":
    main() 